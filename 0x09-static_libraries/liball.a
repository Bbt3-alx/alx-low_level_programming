!<arch>
0-memset.c/     0           0     0     644     543       `
#include <stdio.h>
#include <string.h>
#include "main.h"
#include <stdlib.h>

/**
 * _memset - This function fills the first n bytes of the memory area.
 * @s: Thi param point to a memory area
 * @b: This param is the constant byte to be fill in the
 * Memory area ponted by the param s.
 * @n: This param is the first n bytes of the memory area
 * pointed by s.
 * Return: A string with the new memory byte of s.
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

10-strcpy.c/    0           0     0     644     238       `
#include <stdio.h>
#include <string.h>

/**
 * _strcpy - this function copy a string to another.
 * @dest: String.
 * @src: String.
 * Return: String
 */
char *_strcpy(char *dest, char *src)
{
	char *a = strcpy(dest, src);
	return (a);
}
1-memcpy.c/     0           0     0     644     425       `
#include <stdio.h>

/**
 * _memcpy - This function copies memory area.
 * @dest: This param will receive the n bytes from
 * memory area src.
 * @src: this param is the n bytes to be copied to the dest.
 * @n: The number of bytes to copies.
 * Return: A pointer to dest.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	i = 0;
	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     277       `
#include <stdio.h>
#include <string.h>

/**
 * _strcat - This function appends the src string to the dest string
 * @dest: First String
 * @src: Second String
 * Return: String.
 */
char *_strcat(char *dest, char *src)
{
	char *cat;

	cat = strcat(dest, src);
	return (cat);
}

2-_islower.c/   0           0     0     644     206       `
#include <ctype.h>
#include <stdio.h>
#include <string.h>

/**
 ** _islower - This function transform an upper case to lower.
 * @c: String.
 * Return: An integer.
 */
int _islower(char c)
{
	return (c);
}
2-strchr.c/     0           0     0     644     602       `
#include <stdio.h>
#include <string.h>

/**
 * _strchr - This function search a character in a string.
 * @s: This param represent the String in which we will search
 * the character in variable c.
 * @c: This param is the character that we want to search
 * within the String in the variable s.
 * Return: A pointer to the first occurence of the charater c
 * in the string s, or NULL if the character is not found.
 */
char *_strchr(char *s, char c)
{
	int i, len;

	len = strlen(s);
	i = 0;
	for (i = 0; i <= len; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}
		continue;
	}
	return (NULL);
}
2-strlen.c/     0           0     0     644     284       `
#include <stdio.h>
#include <string.h>

/**
 * _strlen - that function return the lenght of a string.
 * @s: The len of the string to be returned.
 * Return: len.
 */
int _strlen(char *s)
{
	int len, i;

	len = 0;
	i = 0;

	while (s[i] != '\0')
	{
		i++;
		len++;
	}
	return (len);
}
2-strncpy.c/    0           0     0     644     360       `
#include <stdio.h>
#include <string.h>

/**
 * _strncpy - copies a string.
 * @dest: string1
 * @src: string to copie
 * @n: number of bytes
 * Return: string
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	i = 0;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	for ( ; i < n; i++)
	{
		dest[i] = '\0';
	}
	return (dest);
}
3-_isalpha.c/   0           0     0     644     156       `
#include "main.h"

/**
 * _isalpha - thi function will determine an alpha.
 * @c: String.
 * Return: Always 0.
 */
int _isalpha(int c)
{
	return (c);
}
			
3-puts.c/       0           0     0     644     211       `
#include <stdio.h>

/**
 * _puts - That programm will print a given text with puts function
 * Followed by a new line.
 * @str: Text to be printed.
 * Return: Anything.
 */
void _puts(char *str)
{
	puts(str);
}

3-strcmp.c/     0           0     0     644     264       `
#include <stdio.h>
#include <string.h>

/**
 * _strcmp - This function compare two given string
 * @s1: First Strring;
 * @s2: Second String.
 * Return: 0 on succes, 1 else.
 */
char _strcmp(char *s1, char *s2)
{
	int cmp;

	cmp = strcmp(s1, s2);
	return (cmp);
}
3-strspn.c/     0           0     0     644     425       `
#include <string.h>
#include <stdio.h>

/**
 * _strspn - This function will gets the lenght of a prefix substring.
 * @s: The string in which we want to get the substring lenght.
 * @accept: The substring world.
 * Return: the number of bytes in the initial segment of s
 * which consist only of byt from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int len;

	len = strspn(s, accept);
	return (len);
}

4-_abs.c/       0           0     0     644     180       `
#include "main.h"

/**
 * _abs - This function compute an absolute value of an integer.
 * @c: Inter.
 * Return: An integer.
 */
int _abs(int n)
{
	int a = abs(n);

	return (a);
}
4-strpbrk.c/    0           0     0     644     409       `
#include <stdio.h>
#include <string.h>

/**
 * _strpbrk - search a string for any of a set of bytes.
 * @s: String.
 * @accept: String to be searched
 * Return: A pointer to the byte in s that matches one of the bytes accept,
 * or NULL if no such byte is foud.
 */
char *_strpbrk(char *s, char *accept)
{
	char *a;

	a = strpbrk(s, accept);
	if (a != NULL)
	{
		return (a);
	}
	else
	{
		return (NULL);
	}
}

5_isupper.c/    0           0     0     644     171       `
#include "main.h"

/**
 * _isupper - Thi function will check if a given char is upper or not.
 * @c: String.
 * Retrurn: Integer.
 */
int _isupper(int c)
{
	return (c);
}

5-strstr.c/     0           0     0     644     416       `
#include <stdio.h>
#include <string.h>

/**
 * _strstr - This function locates a substring.
 * @haystack: This param is the String in which we will locate the substring.
 * @needle: This param is the substring to be located.
 * Return: A pointer to the begiining of the located substring, or NULL else.
 */
char *_strstr(char *haystack, char *needle)
{
	char *str;

	str = strstr(haystack, needle);
	return (str);
}
6-_isdigit.c/   0           0     0     644     168       `
#include "main.h"

/**
 * _isdigit - Thi function will check if a given inout is digit or not
 * @c: String
 * Return: Integer
 */
int _isdigit(int c)
{
	return (c);
}
7-_atoi.c/      0           0     0     644     162       `
#include "main.h"

/**
 * _atoi - This function convert the initial portion of a string.
 * @s: string.
 * Return: Char.
 */
int _atoi(char *s)
{
	return (*s);
}
8-strcpy.c/     0           0     0     644     430       `
#include "main.h"

/**
 * _strncpy - copies a string.
 * @dest: string1
 * @src: string to copie
 * @n: number of bytes
 * Return: string
 */
char *_strncpy(char *dest, char *src, int n)
{
        int i;

        i = 0;

        for (i = 0; i < n && src[i] != '\0'; i++)
        {
                dest[i] = src[i];
        }
        for ( ; i < n; i++)
        {
                dest[i] = '\0';
        }
        return (dest);
}
9-_strcat.c/    0           0     0     644     277       `
#include "main.h"

/**
 * _strcat - This function appends the src string to the dest string
 * @dest: First String
 * @src: Second String
 * Return: String.
 */
char *_strcat(char *dest, char *src)
{
        char *cat;

        cat = strcat(dest, src);
        return (cat);
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     155       `
#include <unistd.h>

/**
 * _putchar - This is a putvhar function.
 * @c: String.
 * Return: an Integer.
 */
int _putchar(char c)
{
	return((1, &c, 1));
}

